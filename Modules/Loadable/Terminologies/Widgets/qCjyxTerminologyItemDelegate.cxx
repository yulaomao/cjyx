/*==============================================================================

  Program: 3D Cjyx

  Copyright (c) Laboratory for Percutaneous Surgery (PerkLab)
  Queen's University, Kingston, ON, Canada. All Rights Reserved.

  See COPYRIGHT.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This file was originally developed by Csaba Pinter, PerkLab, Queen's University
  and was supported through the Applied Cancer Research Unit program of Cancer Care
  Ontario with funds provided by the Ontario Ministry of Health and Long-Term Care

==============================================================================*/

// Terminologies includes
#include "qCjyxTerminologyItemDelegate.h"

#include "qCjyxTerminologySelectorButton.h"
#include "qCjyxTerminologyNavigatorWidget.h"

#include "vtkCjyxTerminologiesModuleLogic.h"
#include "vtkCjyxTerminologyEntry.h"

// Cjyx includes
#include <qCjyxCoreApplication.h>
#include <qCjyxModuleManager.h>
#include <qCjyxAbstractCoreModule.h>

// VTK includes
#include <vtkSmartPointer.h>

// Qt includes
#include <QDebug>

//-----------------------------------------------------------------------------
vtkCjyxTerminologiesModuleLogic* terminologiesLogic()
{
  vtkCjyxTerminologiesModuleLogic* terminologiesLogic = vtkCjyxTerminologiesModuleLogic::SafeDownCast(
    qCjyxCoreApplication::application()->moduleLogic("Terminologies"));
  if (!terminologiesLogic)
    {
    qCritical() << Q_FUNC_INFO << ": Terminologies logic is not found";
    }
  return terminologiesLogic;
}

//-----------------------------------------------------------------------------
qCjyxTerminologyItemDelegate::qCjyxTerminologyItemDelegate(QObject *parent)
  : QStyledItemDelegate(parent) { }

//-----------------------------------------------------------------------------
QWidget* qCjyxTerminologyItemDelegate::createEditor(QWidget *parent, const QStyleOptionViewItem &/* option */, const QModelIndex &/* index */) const
{
  qCjyxTerminologySelectorButton* terminologyButton = new qCjyxTerminologySelectorButton(parent);
  terminologyButton->setProperty("changeDataOnSet", true);
  connect(terminologyButton, SIGNAL(terminologyChanged()), this, SLOT(commitAndClose()), Qt::QueuedConnection);
  connect(terminologyButton, SIGNAL(canceled()), this, SLOT(close()), Qt::QueuedConnection);
  return terminologyButton;
}

//-----------------------------------------------------------------------------
void qCjyxTerminologyItemDelegate::setEditorData(QWidget *editor, const QModelIndex &index) const
{
  qCjyxTerminologySelectorButton* terminologyButton = qobject_cast<qCjyxTerminologySelectorButton*>(editor);
  if (!terminologyButton)
    {
    return;
    }
  if (!terminologyButton->property("changeDataOnSet").toBool())
    {
    return;
    }
  vtkCjyxTerminologiesModuleLogic* logic = terminologiesLogic();
  terminologyButton->setProperty("changeDataOnSet", false);

  // Get string list value from model index
  QString terminologyString = index.model()->data(index, TerminologyRole).toString();

  // Convert string list to VTK terminology entry. Do not check success, as an empty terminology is also a valid starting point
  vtkNew<vtkCjyxTerminologyEntry> terminologyEntry;
  if (logic)
    {
    logic->DeserializeTerminologyEntry(terminologyString.toUtf8().constData(), terminologyEntry);
    }

  // Get metadata
  QString name = index.model()->data(index, NameRole).toString();
  bool nameAutoGenerated = index.model()->data(index, NameAutoGeneratedRole).toBool();
  QColor color = index.model()->data(index, Qt::DecorationRole).value<QColor>();
  bool colorAutoGenerated = index.model()->data(index, ColorAutoGeneratedRole).toBool();
  QColor generatedColor = index.model()->data(index, qCjyxTerminologyItemDelegate::GeneratedColorRole).value<QColor>();

  qCjyxTerminologyNavigatorWidget::TerminologyInfoBundle terminologyInfo(
    terminologyEntry, name, nameAutoGenerated, color, colorAutoGenerated, generatedColor );
  terminologyButton->setTerminologyInfo(terminologyInfo);

  terminologyButton->changeTerminology();
}

//-----------------------------------------------------------------------------
void qCjyxTerminologyItemDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const
{
  vtkCjyxTerminologiesModuleLogic* logic = terminologiesLogic();
  if (!logic)
    {
    return;
    }
  // Get terminology (changed by the user) from the terminology button
  qCjyxTerminologySelectorButton* terminologyButton = qobject_cast<qCjyxTerminologySelectorButton*>(editor);
  if (!terminologyButton)
    {
    return;
    }
  qCjyxTerminologyNavigatorWidget::TerminologyInfoBundle terminologyInfo;
  terminologyButton->terminologyInfo(terminologyInfo);

  // Set color to model
  model->setData(index, terminologyInfo.ColorAutoGenerated, ColorAutoGeneratedRole);
  model->setData(index, terminologyInfo.Color, Qt::DecorationRole);
  // Set name to model
  model->setData(index, terminologyInfo.NameAutoGenerated, NameAutoGeneratedRole);
  model->setData(index, terminologyInfo.Name, NameRole);
  // Set terminology string to model
  model->setData(index, logic->SerializeTerminologyEntry(terminologyInfo.GetTerminologyEntry()).c_str(), TerminologyRole);
}

//-----------------------------------------------------------------------------
void qCjyxTerminologyItemDelegate::updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &/* index */) const
{
  editor->setGeometry(option.rect);
}

//------------------------------------------------------------------------------
void qCjyxTerminologyItemDelegate::commitSenderData()
{
  QWidget* editor = qobject_cast<QWidget*>(this->sender());
  if (!editor)
    {
    return;
    }
  emit commitData(editor);
}

//------------------------------------------------------------------------------
void qCjyxTerminologyItemDelegate::commitAndClose()
{
  QWidget* editor = qobject_cast<QWidget*>(this->sender());
  if (!editor)
    {
    return;
    }
  emit commitData(editor);
  emit closeEditor(editor);
}

//------------------------------------------------------------------------------
void qCjyxTerminologyItemDelegate::close()
{
  QWidget* editor = qobject_cast<QWidget*>(this->sender());
  if (!editor)
    {
    return;
    }
  emit closeEditor(editor);
}
