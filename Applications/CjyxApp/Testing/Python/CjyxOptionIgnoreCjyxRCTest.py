#!/usr/bin/env python

#
#  Program: 3D Cjyx
#
#  Copyright (c) Kitware Inc.
#
#  See COPYRIGHT.txt
#  or http://www.slicer.org/copyright/copyright.txt for details.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  This file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc.
#  and was partially funded by NIH grant 1U24CA194354-01
#

import os
import sys
import tempfile

from CjyxAppTesting import *

"""
Usage:
    CjyxOptionIgnoreCjyxRCTest.py /path/to/Cjyx
"""

if __name__ == '__main__':

    debug = False
    # Set to True to:
    #  * display the path of the created cjyxrc file
    #  * avoid deleting the cjyxrc file

    if len(sys.argv) != 2:
        print(os.path.basename(sys.argv[0]) + " /path/to/Cjyx")
        exit(EXIT_FAILURE)

    cjyx_executable = os.path.expanduser(sys.argv[1])
    common_args = ['--disable-modules', '--no-main-window']

    fd, cjyxrc = tempfile.mkstemp()
    assert os.path.isfile(cjyxrc)
    try:

        # Create a cjyxrc file that creates CJYXRCTESTOUTPUT file when executed
        with os.fdopen(fd, 'w') as file:
            file.write("# Generated by CjyxOptionIgnoreCjyxRCTest.py\n" +\
                       "import os\n" +\
                       "fd = os.open(os.environ['CJYXRCTESTOUTPUT'], os.O_RDWR|os.O_CREAT)\n" +\
                       "os.write(fd, 'Generated by CjyxOptionIgnoreCjyxRCTest.py test when cjyxrc executed'.encode())\n" +\
                       "os.close(fd)\n")

        cjyxrctestoutput = cjyxrc + ".out"
        os.environ['CJYXRC'] = cjyxrc
        os.environ['CJYXRCTESTOUTPUT'] = cjyxrctestoutput
        if debug:
            print("CJYXRC=%s" % cjyxrc)
            print("CJYXRCTESTOUTPUT=%s" % cjyxrctestoutput)

        # Check that cjyxrc file is loaded
        args = list(common_args)
        (returnCode, stdout, stderr) = runCjyxAndExit(cjyx_executable, args)
        assert os.path.isfile(cjyxrctestoutput)
        os.remove(cjyxrctestoutput)
        assert returnCode == EXIT_SUCCESS
        print("=> ok\n")

        # Check that --ignore-cjyxrc works
        args = list(common_args)
        args.extend(['--ignore-cjyxrc'])
        (returnCode, stdout, stderr) = runCjyxAndExit(cjyx_executable, args)
        assert not os.path.isfile(cjyxrctestoutput)
        assert returnCode == EXIT_SUCCESS
        print("=> ok\n")

        # Check that --testing implies --ignore-cjyxrc
        args = list(common_args)
        args.extend(['--testing'])
        (returnCode, stdout, stderr) = runCjyxAndExit(cjyx_executable, args)
        assert not os.path.isfile(cjyxrctestoutput)
        assert returnCode == EXIT_SUCCESS
        print("=> ok\n")
    finally:
        if not debug:
            os.remove(cjyxrc)
            if os.path.isfile(cjyxrctestoutput):
                os.remove(cjyxrctestoutput)
