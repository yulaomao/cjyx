#
# This file has been primarily designed for the purpose of Cjyx extension development.
#
# It includes the required Cjyx macros/functions and sets up compiler
# settings for a project to use Cjyx.
#
# Note that the behavior of this file can be further customized by
# defining variables like:
#
#   set(Cjyx_SKIP_<DoSomething> TRUE)
#
# Such variable has to be set before:
#
#   include(${Cjyx_USE_FILE})
#
# The variable allowing to customize the behavior are:
#
#  Cjyx_SKIP_USE_FILE_INCLUDE_CHECK
#  Cjyx_SKIP_EXTENSION_NAME_CHECK
#  Cjyx_SKIP_EXTERNAL_PROJECTS_USEFILE
#  Cjyx_SKIP_EXTERNAL_DATA
#  Cjyx_SKIP_CjyxBlockPlatformCheck
#  Cjyx_SKIP_SET_CMAKE_C_CXX_FLAGS
#  Cjyx_SKIP_ITKPlatformSpecificChecks
#  Cjyx_SKIP_CjyxBlockCXXRequiredFlags
#  Cjyx_SKIP_CjyxBlockAdditionalLauncherSettings
#  Cjyx_SKIP_CjyxEnableExtensionTesting
#
# By default, if any 'Cjyx_SKIP_<DoSomething>' variable is set to TRUE,
# a message will be displayed.
#
# For example:
#  set(Cjyx_SKIP_CjyxBlockPlatformCheck TRUE)
#  include(${Cjyx_USE_FILE})
#
# will output:
#  -- Skipping CjyxBlockPlatformCheck
#
# This is can avoided by setting the variable Cjyx_VERBOSE_SKIP to TRUE
#

# --------------------------------------------------------------------------
# Helper function(s) and macro(s)
# --------------------------------------------------------------------------

include(UseCjyxMacros)

# If the variable Cjyx_VERBOSE_SKIP is FALSE, this function will
# display the provided text prepended with "Skipping ".
function(_cjyx_skip_message text)
  if(NOT Cjyx_VERBOSE_SKIP)
    message(STATUS "Skipping ${text}")
  endif()
endfunction()

# --------------------------------------------------------------------------
# Setting and checking EXTENSION_NAME
# --------------------------------------------------------------------------
if(NOT Cjyx_DONT_USE_EXTENSION)
  cjyx_check_variable(EXTENSION_NAME _EXTENSION_NAME_SET)
  if(NOT ${_EXTENSION_NAME_SET})
    cjyx_check_variable(MODULE_NAME _MODULE_NAME_SET)
    if(${_MODULE_NAME_SET})
      set(EXTENSION_NAME ${MODULE_NAME})
    else()
      cjyx_check_variable(PROJECT_NAME _PROJECT_NAME_SET)
      if(${_PROJECT_NAME_SET})
        set(EXTENSION_NAME ${PROJECT_NAME})
      endif()
    endif()
    cjyx_setting_variable_message("EXTENSION_NAME")
  endif()
  if(NOT Cjyx_SKIP_EXTENSION_NAME_CHECK AND "${EXTENSION_NAME}" MATCHES "^$|^Cjyx$|^Project$")
    message(FATAL_ERROR
      "error: Make sure to call 'project(<extension_name>)' or "
      "set EXTENSION_NAME (or MODULE_NAME) prior to call 'include(\${Cjyx_USE_FILE})' !")
  endif()
endif()

if(Cjyx_SOURCE_DIR)
  return()
endif()

# --------------------------------------------------------------------------
# Setup project
# --------------------------------------------------------------------------

if(DEFINED Cjyx_SKIP_PROJECT_COMMAND)
  message(AUTHOR_WARNING
    "Setting Cjyx_SKIP_PROJECT_COMMAND is not required anymore."
    "Calling 'project()' along side 'find_package(Cjyx)' is not"
    "restricted anymore.")
endif()

if(DEFINED Cjyx_SKIP_CjyxBlockSetCMakeOSXVariables)
  message(AUTHOR_WARNING
    "Setting Cjyx_SKIP_CjyxBlockSetCMakeOSXVariables is not required anymore."
    "Calling 'find_package(Cjyx)' does NOT implies the inclusion of "
    "'CjyxBlockSetCMakeOSXVariables'."
    "For convenience, if the developer would like to have the CMAKE_OSX_* variable "
    "automatically set, component 'ConfigurePrerequisites' should be used."
    "For example:"
    "  find_package(Cjyx COMPONENTS ConfigurePrerequisites)"
    "  project(Foo)")
endif()

if(NOT DEFINED ${EXTENSION_NAME}_SOURCE_DIR
  AND NOT DEFINED ${EXTENSION_NAME}_BINARY_DIR
  AND NOT Cjyx_DONT_USE_EXTENSION)
  project(${EXTENSION_NAME})
endif()

# --------------------------------------------------------------------------
# Prerequisites
# --------------------------------------------------------------------------

# Expose mechanism allowing extensions to register ITK IOFactories.
# For details: http://viewvc.slicer.org/viewvc.cgi/Slicer4?view=revision&revision=21592
if(ITK_VERSION VERSION_GREATER_EQUAL "5.3")
  foreach(factory_uc IN ITEMS "IMAGEIO" "MESHIO" "TRANSFORMIO")
    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)
  endforeach()
else()
  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt
endif()
list(APPEND ITK_LIBRARIES ITKFactoryRegistration)
list(APPEND ITK_INCLUDE_DIRS ${ITKFactoryRegistration_INCLUDE_DIRS})

# By default, the "<PROJECT>_USE_FILE" of each cjyx external project will be included.
# This can be changed by setting the variable Cjyx_SKIP_EXTERNAL_PROJECTS_USEFILE to TRUE
if(NOT DEFINED Cjyx_SKIP_EXTERNAL_PROJECTS_USEFILE)
  set(Cjyx_SKIP_EXTERNAL_PROJECTS_USEFILE FALSE)
endif()
if(NOT ${Cjyx_SKIP_EXTERNAL_PROJECTS_USEFILE})
  foreach(proj ${Cjyx_EXTERNAL_PROJECTS})
    set(proj_has_no_usefile -1)
    list(FIND Cjyx_EXTERNAL_PROJECTS_NO_USEFILE ${proj} proj_has_no_usefile)
    #message("${proj} has_no_usefile: ${proj_has_no_usefile}")
    if(proj_has_no_usefile EQUAL -1)
      include(${${proj}_USE_FILE})
    endif()
  endforeach()
else()
  _cjyx_skip_message("Cjyx_SKIP_EXTERNAL_PROJECTS_USEFILE")
endif()

# Set '<PROJECTNAME>_DIR' variable(s) so that find_package(<PROJECTNAME>) works as expected.
# NA

# Find PythonQt package so that PYTHONQT_USE_RELEASE_PYTHON_FALLBACK is defined
# See https://github.com/commontk/PythonQt/issues/7
# and https://github.com/commontk/PythonQt/issues/8
if(Cjyx_USE_PYTHONQT)
  find_package(PythonQt)
endif()

# --------------------------------------------------------------------------
# ExternalData
# --------------------------------------------------------------------------
if(NOT DEFINED Cjyx_SKIP_EXTERNAL_DATA)
  set(Cjyx_SKIP_EXTERNAL_DATA FALSE)
endif()
if(NOT ${Cjyx_SKIP_EXTERNAL_DATA})
  set(ExternalData_OBJECT_STORES ${Cjyx_ExternalData_OBJECT_STORES})
  set(ExternalData_URL_TEMPLATES ${Cjyx_ExternalData_URL_TEMPLATES})
else()
  _cjyx_skip_message("Cjyx_ExternalData")
endif()

# --------------------------------------------------------------------------
# Platform check
# --------------------------------------------------------------------------
if(NOT DEFINED Cjyx_SKIP_CjyxBlockPlatformCheck)
  set(Cjyx_SKIP_CjyxBlockPlatformCheck FALSE)
endif()
if(NOT ${Cjyx_SKIP_CjyxBlockPlatformCheck})
  include(CjyxBlockPlatformCheck)
else()
  _cjyx_skip_message("CjyxBlockPlatformCheck")
endif()

#-----------------------------------------------------------------------------
# Set CMAKE_{C,CXX}_FLAGS variables
#-----------------------------------------------------------------------------
if(NOT DEFINED Cjyx_SKIP_SET_CMAKE_C_CXX_FLAGS)
  set(Cjyx_SKIP_SET_CMAKE_C_CXX_FLAGS FALSE)
endif()
if(NOT ${Cjyx_SKIP_SET_CMAKE_C_CXX_FLAGS})
  #-----------------------------------------------------------------------------
  # Set ITK_REQUIRED_{C,CXX}_FLAGS variables
  #-----------------------------------------------------------------------------
  if(NOT DEFINED Cjyx_SKIP_ITKPlatformSpecificChecks)
    set(Cjyx_SKIP_ITKPlatformSpecificChecks FALSE)
  endif()
  if(NOT ${Cjyx_SKIP_ITKPlatformSpecificChecks})
    include(ITKPlatformSpecificChecks)
  else()
    _cjyx_skip_message("ITKPlatformSpecificChecks")
  endif()

  #-----------------------------------------------------------------------------
  # Set Cjyx_{C,CXX}_REQUIRED_FLAGS variables
  #-----------------------------------------------------------------------------
  if(NOT DEFINED Cjyx_SKIP_CjyxBlockCXXRequiredFlags)
    set(Cjyx_SKIP_CjyxBlockCXXRequiredFlags FALSE)
  endif()
  if(NOT ${Cjyx_SKIP_CjyxBlockCXXRequiredFlags})
    include(CjyxBlockCXXRequiredFlags)
  else()
    _cjyx_skip_message("CjyxBlockCXXRequiredFlags")
  endif()

  #-----------------------------------------------------------------------------
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS_INIT} ${Cjyx_REQUIRED_C_FLAGS} ${ITK_REQUIRED_C_FLAGS} ${ADDITIONAL_C_FLAGS}" CACHE STRING "CMake C Flags" FORCE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_INIT} ${Cjyx_REQUIRED_CXX_FLAGS} ${ITK_REQUIRED_CXX_FLAGS} ${ADDITIONAL_CXX_FLAGS}" CACHE STRING "CMake CXX Flags" FORCE)
else()
  _cjyx_skip_message("ITKPlatformSpecificChecks")
  _cjyx_skip_message("CjyxBlockCXXRequiredFlags")
  _cjyx_skip_message("SET_CMAKE_C_CXX_FLAGS")
endif()

#-----------------------------------------------------------------------------
# Static or Shared library
#------------------------------------------------------------------------------
if(NOT DEFINED BUILD_SHARED_LIBS)
  set(BUILD_SHARED_LIBS ${Cjyx_BUILD_SHARED})
endif()

#-----------------------------------------------------------------------------
# Include directories - See CjyxMacroBuildLoadableModule
#------------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# CMake Function(s) and Macro(s)
#-----------------------------------------------------------------------------
include(CMakeParseArguments)
include(ctkFunctionAddExecutableUtf8)
include(ctkMacroCompilePythonScript)
include(ctkMacroWrapPythonQt)
include(ExternalProject)
include(ExternalProjectDependency)
include(ExternalProjectDependencyForPython)
include(ExternalProjectGenerateProjectDescription)
include(CjyxInitializeBuildType)
if(Cjyx_BUILD_CLI_SUPPORT)
  include(CjyxMacroBuildCLI)
endif()
include(CjyxMacroBuildModuleQtLibrary)
include(CjyxMacroBuildModuleVTKLibrary)
include(CjyxMacroPythonWrapModuleVTKLibrary)
include(CjyxConfigureDisplayableManagerObjectFactory)
include(CjyxMacroBuildModuleLogic)
include(CjyxMacroBuildModuleDMML)
include(CjyxMacroBuildModuleWidgets)
include(CjyxMacroBuildLoadableModule)
include(CjyxMacroBuildScriptedCLI)
include(CjyxMacroBuildScriptedModule)
include(CjyxFunctionAddPythonQtResources)
include(CjyxMacroExtractRepositoryInfo)
include(vtkMacroKitPythonWrap)

include(CjyxMacroConfigureModuleCxxTestDriver)
include(ExternalData)
include(CjyxMacroSimpleTest)
include(CjyxMacroPythonTesting)
include(CjyxMacroConfigureGenericCxxModuleTests)
include(CjyxMacroConfigureGenericPythonModuleTests)

if(DEFINED CMAKE_OSX_ARCHITECTURES)
  mark_as_superbuild( VARS CMAKE_OSX_ARCHITECTURES:STRING ALL_PROJECTS)
endif()
if(DEFINED CMAKE_OSX_SYSROOT)
  mark_as_superbuild(VARS CMAKE_OSX_SYSROOT:PATH ALL_PROJECTS)
endif()
if(DEFINED CMAKE_OSX_DEPLOYMENT_TARGET)
  mark_as_superbuild(VARS CMAKE_OSX_DEPLOYMENT_TARGET:STRING ALL_PROJECTS)
endif()

if(NOT Cjyx_DONT_USE_EXTENSION)
  #-----------------------------------------------------------------------------
  # Configure additional launcher settings
  #-----------------------------------------------------------------------------
  if(${Cjyx_USE_CTKAPPLAUNCHER})
    if(NOT DEFINED Cjyx_SKIP_CjyxBlockAdditionalLauncherSettings)
      set(Cjyx_SKIP_CjyxBlockAdditionalLauncherSettings FALSE)
    endif()
    if(NOT ${Cjyx_SKIP_CjyxBlockAdditionalLauncherSettings})
      include(CjyxBlockAdditionalLauncherSettings)
    endif()
  endif()

  #-----------------------------------------------------------------------------
  # Set Cjyx_EXTENSION_CMAKE_GENERATOR and EXTENSION_{COMPILER, ARCHITECTURE, BITNESS, OPERATING_SYSTEM}
  #-----------------------------------------------------------------------------

  include(CjyxBlockUploadExtensionPrerequisites)
endif()

#-----------------------------------------------------------------------------
# Set Cjyx_BUNDLE_EXTENSIONS_LOCATION variable
#-----------------------------------------------------------------------------
set(Cjyx_BUNDLE_EXTENSIONS_LOCATION "")
if(APPLE)
  set(Cjyx_BUNDLE_EXTENSIONS_LOCATION "${Cjyx_EXTENSIONS_DIRNAME}/${EXTENSION_NAME}/")
  set(CMAKE_INSTALL_NAME_TOOL "" CACHE FILEPATH "" FORCE) # XXX Probably not needed anymore
  set(CMAKE_MACOSX_RPATH 0 CACHE BOOL "" FORCE)
  mark_as_superbuild(VARS CMAKE_MACOSX_RPATH:BOOL ALL_PROJECTS)
endif()

#-----------------------------------------------------------------------------
# Set CjyxExecutionModel_DEFAULT_CLI_*_OUTPUT_DIRECTORY variables
#-----------------------------------------------------------------------------
if(Cjyx_BUILD_CLI_SUPPORT)
  set(CjyxExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${Cjyx_CLIMODULES_BIN_DIR}")
  set(CjyxExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${Cjyx_CLIMODULES_LIB_DIR}")
  set(CjyxExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${Cjyx_CLIMODULES_LIB_DIR}")
endif()

#-----------------------------------------------------------------------------
# Set Cjyx_INSTALL_*MODULE_*_DIR variables
#-----------------------------------------------------------------------------
if(Cjyx_BUILD_CLI_SUPPORT)
  set(Cjyx_INSTALL_CLIMODULES_BIN_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_CLIMODULES_BIN_DIR}")
  set(Cjyx_INSTALL_CLIMODULES_LIB_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_CLIMODULES_LIB_DIR}")
  set(Cjyx_INSTALL_CLIMODULES_SHARE_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_CLIMODULES_SHARE_DIR}")
  if(APPLE)
    set(CjyxExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION "${Cjyx_INSTALL_CLIMODULES_BIN_DIR}")
    set(CjyxExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION "${Cjyx_INSTALL_CLIMODULES_LIB_DIR}")
    set(CjyxExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION "${Cjyx_INSTALL_CLIMODULES_LIB_DIR}")
    set(CjyxExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS
      "${CjyxExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS} -Wl,-rpath,@loader_path/../../../../../")
    set(CjyxExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS
      "${CjyxExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS} -Wl,-rpath,@loader_path/../../../../../")
  endif()
endif()

set(Cjyx_INSTALL_QTLOADABLEMODULES_BIN_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTLOADABLEMODULES_BIN_DIR}")
set(Cjyx_INSTALL_QTLOADABLEMODULES_LIB_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTLOADABLEMODULES_LIB_DIR}")
set(Cjyx_INSTALL_QTLOADABLEMODULES_PYTHON_LIB_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTLOADABLEMODULES_PYTHON_LIB_DIR}")
set(Cjyx_INSTALL_QTLOADABLEMODULES_INCLUDE_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTLOADABLEMODULES_INCLUDE_DIR}")
set(Cjyx_INSTALL_QTLOADABLEMODULES_SHARE_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTLOADABLEMODULES_SHARE_DIR}")

if(Cjyx_USE_PYTHONQT)
  set(Cjyx_INSTALL_QTSCRIPTEDMODULES_BIN_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTSCRIPTEDMODULES_BIN_DIR}")
  set(Cjyx_INSTALL_QTSCRIPTEDMODULES_LIB_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTSCRIPTEDMODULES_LIB_DIR}")
  set(Cjyx_INSTALL_QTSCRIPTEDMODULES_INCLUDE_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTSCRIPTEDMODULES_INCLUDE_DIR}")
  set(Cjyx_INSTALL_QTSCRIPTEDMODULES_SHARE_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_QTSCRIPTEDMODULES_SHARE_DIR}")
endif()

# These variables can be used when configuring extension external projects in
# two different scenarios: (1) bundled extensions and (2) regular extensions.
#
# The values set below corresponds to scenario (2). Value for scenario (1) are set
# in CjyxDirectories.cmake.
set(Cjyx_INSTALL_THIRDPARTY_BIN_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_THIRDPARTY_BIN_DIR}")
set(Cjyx_INSTALL_THIRDPARTY_LIB_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_THIRDPARTY_LIB_DIR}")
set(Cjyx_INSTALL_THIRDPARTY_SHARE_DIR "${Cjyx_INSTALL_ROOT}${Cjyx_BUNDLE_EXTENSIONS_LOCATION}${Cjyx_THIRDPARTY_SHARE_DIR}")

set(Cjyx_INSTALL_THIRDPARTY_EXECUTABLE_LINK_FLAGS "")
set(Cjyx_INSTALL_THIRDPARTY_LIBRARY_LINK_FLAGS "")
if(APPLE)
  # Since both the Cjyx_INSTALL_THIRDPARTY_*_DIR and Cjyx_INSTALL_ROOT variables correspond to relative
  # directory, prepending "/" allow us to use "file(RELATIVE_PATH ..." for computing the loader_path relative
  # path.

  file(RELATIVE_PATH thirdparty_bin_relative_dir /${Cjyx_INSTALL_THIRDPARTY_BIN_DIR} /${Cjyx_INSTALL_ROOT})
  set(Cjyx_INSTALL_THIRDPARTY_EXECUTABLE_LINK_FLAGS "-Wl,-rpath,@loader_path/${thirdparty_bin_relative_dir}")

  file(RELATIVE_PATH thirdparty_lib_relative_dir /${Cjyx_INSTALL_THIRDPARTY_LIB_DIR} /${Cjyx_INSTALL_ROOT})
  set(Cjyx_INSTALL_THIRDPARTY_LIBRARY_LINK_FLAGS "-Wl,-rpath,@loader_path/${thirdparty_lib_relative_dir}")
endif()


#-----------------------------------------------------------------------------
# Set extension defaults if not already specified
#-----------------------------------------------------------------------------
if(NOT Cjyx_DONT_USE_EXTENSION)
  if(NOT DEFINED EXTENSION_DEPENDS)
    set(EXTENSION_DEPENDS NA) # Specified as a space separated list or 'NA' if any
  endif()
  if(NOT DEFINED EXTENSION_LICENSE_FILE)
    set(EXTENSION_LICENSE_FILE ${Cjyx_LICENSE_FILE})
  endif()
  if(NOT DEFINED EXTENSION_README_FILE)
    set(EXTENSION_README_FILE ${Cjyx_README_FILE})
  endif()

  if(NOT DEFINED EXTENSION_SOURCE_DIR)
    set(EXTENSION_SOURCE_DIR ${CMAKE_SOURCE_DIR})
  endif()
  if(NOT DEFINED EXTENSION_SUPERBUILD_BINARY_DIR)
    set(EXTENSION_SUPERBUILD_BINARY_DIR ${CMAKE_BINARY_DIR})
  endif()
  if(NOT DEFINED EXTENSION_BUILD_SUBDIRECTORY)
    set(EXTENSION_BUILD_SUBDIRECTORY ".")
  endif()
  if(NOT DEFINED EXTENSION_ENABLED)
    set(EXTENSION_ENABLED 1)
  endif()

  cjyx_setting_variable_message("EXTENSION_SOURCE_DIR" SKIP_TRUNCATE)
  cjyx_setting_variable_message("EXTENSION_SUPERBUILD_BINARY_DIR" SKIP_TRUNCATE)
  cjyx_setting_variable_message("EXTENSION_BUILD_SUBDIRECTORY" SKIP_TRUNCATE)

  #-----------------------------------------------------------------------------
  include(CjyxExtensionDescriptionSpec)

  foreach(var IN LISTS Cjyx_EXT_OPTIONAL_METADATA_NAMES)
    cjyx_setting_variable_message(EXTENSION_${var})
  endforeach()

  #
  # If not defined, initialize optional variables with their default values.
  #
  foreach(var IN LISTS Cjyx_EXT_OPTIONAL_METADATA_NAMES)
    if(NOT DEFINED EXTENSION_${var})
      set(EXTENSION_${var} "${Cjyx_EXT_METADATA_${var}_DEFAULT}")
      cjyx_setting_variable_message(EXTENSION_${var}
        PRETEXT "Setting default for EXTENSION_${var}")
    endif()
  endforeach()

  #-----------------------------------------------------------------------------
  if(NOT DEFINED Cjyx_SKIP_CjyxEnableExtensionTesting)
    set(Cjyx_SKIP_CjyxEnableExtensionTesting FALSE)
  endif()
  if(NOT ${Cjyx_SKIP_CjyxEnableExtensionTesting}
     AND NOT "${EXTENSION_NAME}" STREQUAL "")
     include(CTest)
     include(ExternalData)

     find_package(Git)
     mark_as_superbuild(GIT_EXECUTABLE)
  endif()
endif()
